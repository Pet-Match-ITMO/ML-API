name: Deploy ML-API

permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  test:
    uses: ./.github/workflows/test.yaml
    secrets:
      PETS_DATABASE_PATH: ${{ secrets.PETS_DATABASE_PATH }}

  build-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push test image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/pet-match-itmo/ml-api:test-${{ github.sha }}

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/pet-match-itmo/ml-api:latest
            ghcr.io/pet-match-itmo/ml-api:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ML_API_SERVER_HOST }}
          username: ${{ secrets.ML_API_SERVER_USER }}
          key: ${{ secrets.ML_API_SERVER_SSH_KEY }}
          port: ${{ secrets.ML_API_SERVER_PORT }}
          script: |
            cd ${{ secrets.ML_API_SERVER_PROJECT_PATH }}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
            git pull origin master
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ .env
            export PETS_DATABASE_PATH="${{ secrets.PETS_DATABASE_PATH }}"
            export API_URL="${{ secrets.API_URL }}"
            export BOT_TOKEN="${{ secrets.BOT_TOKEN }}"
            export ACCESS_TOKEN="${{ secrets.ACCESS_TOKEN }}"
            export SB_AUTH_DATA="${{ secrets.SB_AUTH_DATA }}"
            export CACHE_TTL="${{ secrets.CACHE_TTL }}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .env —Ñ–∞–π–ª
            ./generate-env.sh
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–µ—Ç—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if ! docker network ls | grep -q petmatch-network; then
              echo "üåê –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–µ—Ç—å petmatch-network..."
              docker network create petmatch-network
            fi
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞ –∏–∑ registry
            cat > docker-compose.prod.yaml << EOF
            version: '3.8'
            
            services:
              ml-api:
                image: ghcr.io/pet-match-itmo/ml-api:latest
                ports:
                  - "8001:8000"
                environment:
                  - PETS_DATABASE_PATH=\${PETS_DATABASE_PATH}
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                networks:
                  - ml-api-network
            
            networks:
              ml-api-network:
                driver: bridge
            EOF
            
            # –î–µ–ø–ª–æ–∏–º —Å–µ—Ä–≤–∏—Å
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml down
            docker compose -f docker-compose.prod.yaml up -d
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            sleep 15
            if curl -f http://localhost:8001/ > /dev/null 2>&1; then
              echo "‚úÖ ML-API —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω!"
              docker compose -f docker-compose.prod.yaml ps
            else
              echo "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è ML-API"
              docker compose -f docker-compose.prod.yaml logs ml-api
              exit 1
            fi
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            docker system prune -f
